{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Finx",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#imports"
		},
		{
			"include": "#definitions"
		},
		{
			"include": "#function-declarations"
		},
		{
			"include": "#function-calls"
		},
		{
			"include": "#instantiations"
		},
		{
			"include": "#actions"
		},
		{
			"include": "#variable-references"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.finx",
					"match": "//.*$"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.finx",
					"match": "\\b(if|else|else\\sif)\\b"
				},
				{
					"name": "constant.language.null.finx",
					"match": "\\bnull\\b"
				},
				{
					"name": "constant.language.undefined.finx",
					"match": "\\bundefined\\b"
				},
				{
					"name": "constant.language.nan.finx",
					"match": "\\bNaN\\b"
				},
				{
					"name": "constant.language.infinity.finx",
					"match": "\\bInfinity\\b"
				},
				{
					"name": "constant.language.abort.finx",
					"match": "\\bAbort\\b"
				}
			]
		},
		"imports": {
			"patterns": [
				{
					"name": "keyword.control.finx",
					"match": "\\bimport\\b"
				},
				{
					"name": "entity.name.namespace.finx",
					"match": "(?<=import\\s+)\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s*(?:as|from|\\s*$))"
				},
				{
					"name": "keyword.control.finx",
					"match": "\\b(as|from)\\b"
				},
				{
					"name": "entity.name.alias.finx",
					"match": "(?<=as\\s+)\\b[A-Za-z_][A-Za-z0-9_]*\\b"
				}
			]
		},
		"definitions": {
			"patterns": [
				{
					"name": "keyword.control.finx",
					"match": "\\b(def|fin)\\b"
				},
				{
					"name": "variable.name.finx",
					"match": "(?<=def\\s+)\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=:)"
				},
				{
					"name": "constant.name.finx",
					"match": "(?<=fin\\s+)\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=:)"
				},
				{
					"name": "support.type.finx",
					"match": "(?<=(def|fin)\\s+\\b[A-Za-z_][A-Za-z0-9_]*:\\s+)\\b[A-Z][A-Za-z0-9_]*\\b(?=\\s=)"
				}
			]
		},
		"function-declarations": {
			"patterns": [
				{
					"name": "keyword.control.finx",
					"match": "\\bfunc\\b"
				},
				{
					"name": "support.type.finx",
					"match": "(?<=func\\s+)\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s+[A-Za-z_][A-Za-z0-9_]*\\s*\\()"
				},
				{
					"name": "entity.name.function.finx",
					"match": "(?<=func\\s+[A-Za-z_][A-Za-z0-9_]*\\s+)\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s*\\()"
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.begin.finx"
						}
					},
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.parameters.end.finx"
						}
					},
					"patterns": [
						{
							"name": "support.type.finx",
							"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s+[A-Za-z_][A-Za-z0-9_]*\\b(?:\\s*,|\\s*\\)))"
						},
						{
							"name": "variable.parameter.finx",
							"match": "(?<=\\b[A-Za-z_][A-Za-z0-9_]*\\s+)\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s*(?:,|\\)))"
						},
						{
							"name": "punctuation.separator.finx",
							"match": ","
						}
					]
				},
				{
					"name": "punctuation.definition.block.begin.finx",
					"match": "{"
				}
			]
		},
		"function-calls": {
			
		},
		"instantiations": {
			"patterns": [
				{
					"name": "keyword.control.new.finx",
					"match": "\\bnew\\b"
				},
				{
					"name": "entity.name.type.finx",
					"match": "(?<=new\\s+)\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\()"
				}
			]
		},
		"actions": {
			"patterns": [
				{
					"name": "variable.other.object.finx",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\.)"
				},
				{
					"name": "entity.name.function.finx",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\()"
				},
				{
					"begin": "(?<=\\b[A-Za-z_][A-Za-z0-9_]*)\\.\\b[A-Za-z_][A-Za-z0-9_]*\\b",
					"end": "\\(",
					"beginCaptures": {
						"0": {
							"patterns": [
								{
									"name": "punctuation.accessor.finx",
									"match": "\\."
								},
								{
									"name": "entity.name.function.finx",
									"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
								}
							]
						}
					},
					"patterns": [
						{
							"name": "punctuation.accessor.finx",
							"match": "\\."
						},
						{
							"name": "entity.name.function.finx",
							"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
						}
					]
				}
			]
		},
		"variable-references": {
			"patterns": [
				{
					"name": "variable.other.finx",
					"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?![\\s]*[\\(\\.])"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.finx",
					"begin": "\"",
					"end": "\""
				},
				{
					"name": "string.quoted.single.finx",
					"begin": "'",
					"end": "'"
				}
			]
		}
	},
	"scopeName": "source.finx"
}